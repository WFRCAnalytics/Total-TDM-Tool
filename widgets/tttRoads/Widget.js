//javascript for controlling Transit Ridership App
//written by Bill Hereth February 2022

//values will be generated by using string programatically built with eval()
//'Dx_' is a place holder for 'D1_' and 'D2_' in field names... 'Dt_' means the total... so no 'Dx' prefix
//'obj' is place holder for record object
//agg is how to combine both directions
var dRoadOptions = [
  {value:"Lanes" ,label:"Lanes"               , agg:"sum" , numerator:"obj['Dx_LANES']", denominator: "1"},
  {value:"Vol",label:"Daily Volume (2-Way)", agg:"none", numerator:"obj['Dt_DY_VOL']", denominator: "1"},
  {value:"AMSpd",label:"AM Period Speeds"    , agg:"min" , numerator:"obj['Dx_AM_SPD']", denominator: "1"},
//{value:"AMVC" ,label:"AM Period V/C Ratio" , agg:"max" , numerator:"obj['Dx_AM_VOL'] + (0.5 * obj['Dx_AM_MD']) + obj['Dx_AM_HV']", denominator: "3 * obj['Dx_CAP1HL'] * obj['Dx_LANES']" }, //PCE in numerator MD * 1.5 and HV * 2
  {value:"PMSpd",label:"PM Period Speeds"    , agg:"min" , numerator:"obj['Dx_AM_SPD']", denominator: "1"},
//{value:"PMVC" ,label:"PM Period V/C Ratio" , agg:"max" , numerator:"obj['Dx_PM_VOL'] + (0.5 * obj['Dx_PM_MD']) + obj['Dx_PM_HV']", denominator: "3 * obj['Dx_CAP1HL'] * obj['Dx_LANES']" }, //PCE in numerator MD * 1.5 and HV * 2
  {value:"VolTrk",label:"Daily MD & HV Trucks", agg:"none", numerator:"obj['Dt_DY_MD'] + obj['Dt_DY_HV']", denominator: "1"}
];

var dRoadPCOptions = [
  {value: "Abs" , label:"Absolute Change"},
  {value: "PC"  , label:"Percent Change"}
];

var curRoadOption       = "Vol";
var curRoadPCOption     = "Abs";

var minScaleForLabels = 87804;
var labelClassOn;
var labelClassOff;
var sCWhite = "#FFFFFF";
var dHaloSize = 2.0;

var bindata;
var dataFNConv;

var tttR;

var iPixelSelectionTolerance = 5;

var renderer_Vol_PC_Change;
var renderer_road;

var measureParams = [];

define(['dojo/_base/declare',
  'jimu/BaseWidget',
  'jimu/LayerInfos/LayerInfos',
  'dijit/registry',
  'dojo/dom',
  'dojo/dom-style',
  'dijit/dijit',
  'dojox/charting/Chart',
  'dojox/charting/themes/Claro',
  'dojox/charting/themes/Julie',
  'dojox/charting/SimpleTheme',
  'dojox/charting/plot2d/Scatter',
  'dojox/charting/plot2d/Markers',
  'dojox/charting/plot2d/Columns',
  'dojox/charting/widget/Legend',
  'dojox/charting/action2d/Tooltip',
  'dojox/layout/TableContainer',
  'dojox/layout/ScrollPane',
  'dijit/layout/ContentPane',
  'jimu/PanelManager',
  'dijit/form/TextBox',
  'dijit/form/ToggleButton',
  'jimu/LayerInfos/LayerInfos',
  'esri/tasks/query',
  'esri/tasks/QueryTask',
  'esri/layers/GraphicsLayer',
  'esri/layers/FeatureLayer',
  'esri/dijit/FeatureTable',
  'esri/symbols/SimpleFillSymbol',
  'esri/symbols/SimpleLineSymbol',
  'esri/symbols/SimpleMarkerSymbol',
  'esri/symbols/TextSymbol',
  'esri/symbols/Font',
  'esri/layers/LabelClass',
  'esri/InfoTemplate',
  'esri/Color',
  'esri/map',
  'esri/renderers/ClassBreaksRenderer',
  'esri/renderers/UniqueValueRenderer',
  'esri/geometry/Extent',
  'dojo/store/Memory',
  'dojox/charting/StoreSeries',
  'dijit/Dialog',
  'dijit/form/Button',
  'dijit/form/RadioButton',
  'dijit/form/MultiSelect',
  'dojox/form/CheckedMultiSelect',
  'dijit/form/Select',
  'dijit/form/ComboBox',
  'dijit/form/CheckBox',
  'dojo/store/Observable',
  'dojox/charting/axis2d/Default',
  'dojo/domReady!'],
function(declare, BaseWidget, LayerInfos, registry, dom, domStyle, dijit, Chart, Claro, Julie, SimpleTheme, Scatter, Markers, Columns, Legend, Tooltip, TableContainer, ScrollPane, ContentPane, PanelManager, TextBox, ToggleButton, LayerInfos, Query, QueryTask, GraphicsLayer, FeatureLayer, FeatureTable, SimpleFillSymbol, SimpleLineSymbol, SimpleMarkerSymbol, TextSymbol, Font, LabelClass, InfoTemplate, Color, Map, ClassBreaksRenderer, UniqueValueRenderer, Extent, Memory, StoreSeries, Dialog, Button, RadioButton, MutliSelect, CheckedMultiSelect, Select, ComboBox, CheckBox, Observable) {
  //To create a widget, you need to derive from BaseWidget.
  
  return declare([BaseWidget], {
    // DemoWidget code goes here

    //please note that this property is be set by the framework when widget is loaded.
    //templateString: template,

    baseClass: 'jimu-widget-demo',

    postCreate: function() {
      this.inherited(arguments);
      console.log('postCreate');
      dom.byId("_7_panel").style.left = '55px'; // NEED TO FIND BETTER PLACE WHERE WIDGET IS CREATED RATHER THAN HERE
    },

    startup: function() {
      console.log('startup');

      tttR = this;
      
      this.inherited(arguments);
      //this.map.setInfoWindowOnClick(false); // turn off info window (popup) when clicking a feature

      //Daily Volume Renderers
      var aBrk_Vol_Absolute = new Array(
        {minValue:      0, maxValue:     5999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[0]), 0.50), label:   "Less than 6,000"},
        {minValue:   6000, maxValue:    17999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[1]), 1.10), label:   "6,000 to 18,000"},
        {minValue:  18000, maxValue:    35999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[2]), 1.70), label:  "18,000 to 36,000"},
        {minValue:  36000, maxValue:    71999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[3]), 2.30), label:  "36,000 to 72,000"},
        {minValue:  72000, maxValue:   119999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[4]), 3.90), label: "72,000 to 120,000"},
        {minValue: 120000, maxValue:   159999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[5]), 3.50), label:"120,000 to 160,000"},
        {minValue: 160000, maxValue:   199999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[6]), 4.10), label:"160,000 to 200,000"},
        {minValue: 200000, maxValue:   239999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[7]), 4.70), label:"200,000 to 240,000"},
        {minValue: 240000, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[8]), 5.30), label: "More than 240,000"}
      );
      renderer_Vol_Absolute = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Vol_Absolute.length;j++) {
        renderer_Vol_Absolute.addBreak(aBrk_Vol_Absolute[j]);
      }
      var aBrk_Vol_Change = new Array(
        {minValue: -9999999, maxValue:   -25001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000), label: "Less than -25,000"},
        {minValue:   -25000, maxValue:   -10001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 2.5000), label: "-25,000 to -10,000"},
        {minValue:   -10000, maxValue:    -5001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 1.2500), label: "-10,000 to -5,000"},
        {minValue:    -5000, maxValue:    -1001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 0.6250), label: "-5,000 to -1,000"},
        {minValue:    -1000, maxValue:      999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.3125), label: "-1,000 to +1,000"},
        {minValue:     1000, maxValue:     4999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250), label: "+1,000 to +5,000"},
        {minValue:     5000, maxValue:     9999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 1.2500), label: "+5,000 to +10,000"},
        {minValue:    10000, maxValue:    49999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 2.5000), label: "+10,000 to +50,000"},
        {minValue:    50000, maxValue:    79999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 4.5000), label: "+50,000 to +75,000"},
        {minValue:    80000, maxValue:   119999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"), 5.0000), label: "+80,000 to +120,000"},
        {minValue:   120000, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"), 9.0000), label: "More than +120,000"}
      );
      renderer_Vol_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Vol_Change.length;j++) {
        renderer_Vol_Change.addBreak(aBrk_Vol_Change[j]);
      }

      //Lanes Renderers
      var aBrk_Lanes_Absolute = new Array(
        {minValue:  1, maxValue:  3, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[0]), 0.50), label:"3 Lanes or Less" },
        {minValue:  4, maxValue:  5, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[1]), 1.25), label:"4 to 5 Lanes"    },
        {minValue:  6, maxValue:  7, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[2]), 2.00), label:"6 to 7 Lanes"    },
        {minValue:  8, maxValue:  9, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[3]), 2.75), label:"8 to 9 Lanes"    },
        {minValue: 10, maxValue: 11, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[4]), 3.50), label:"10 to 11 Lanes"  },
        {minValue: 12, maxValue: 13, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[5]), 4.25), label:"12 to 13 Lanes"  },
        {minValue: 14, maxValue: 15, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[6]), 5.00), label:"14 to 15 Lanes"  },
        {minValue: 16, maxValue: 17, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[7]), 5.75), label:"16 to 17 Lanes"  },
        {minValue: 18, maxValue: 99, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[8]), 6.50), label:"18 or More Lanes"}
      );
      renderer_Lanes_Absolute = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Lanes_Absolute.length;j++) {
        renderer_Lanes_Absolute.addBreak(aBrk_Lanes_Absolute[j]);
      }
      var aBrk_Lanes_Change = new Array(
        {minValue: -99, maxValue: -4, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000), label: "-4 or More Lanes"},
        {minValue:  -3, maxValue: -3, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 3.7500), label: "-3 Lanes"        },
        {minValue:  -2, maxValue: -2, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 2.5000), label: "-2 Lanes"        },
        {minValue:  -1, maxValue: -1, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 1.2500), label: "-1 Lane"         },
        {minValue:   0, maxValue:  0, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.6250), label: "No Change"       },
        {minValue:   1, maxValue:  1, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 1.2500), label: "+1 Lane"         },
        {minValue:   2, maxValue:  2, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 2.5000), label: "+2 Lanes"        },
        {minValue:   3, maxValue:  3, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 3.7500), label: "+3 Lanes"        },
        {minValue:   4, maxValue: 99, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 5.0000), label: "+4 or More Lanes"}
      );
      renderer_Lanes_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Lanes_Change.length;j++) {
        renderer_Lanes_Change.addBreak(aBrk_Lanes_Change[j]);
      }

      //PM Speed Renderers
      var aBrk_Spd_Absolute = new Array(
        {minValue:  0, maxValue:       10, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[0]), 0.50), label:"Less than 10 mph"},
        {minValue: 10, maxValue:       20, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[1]), 1.10), label:"10 to 20 mph"    },
        {minValue: 20, maxValue:       30, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[2]), 1.70), label:"20 to 30 mph"    },
        {minValue: 30, maxValue:       40, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[3]), 2.30), label:"30 to 40 mph"    },
        {minValue: 40, maxValue:       50, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[4]), 3.90), label:"40 to 50 mph"    },
        {minValue: 50, maxValue:       60, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[5]), 3.50), label:"50 to 60 mph"    },
        {minValue: 60, maxValue:       70, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[6]), 4.10), label:"60 to 70 mph"    },
        {minValue: 70, maxValue:       80, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[7]), 4.70), label:"70 to 80 mph"    },
        {minValue: 80, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[8]), 5.30), label:"More than 80 mph"}
      );
      renderer_AMSpd_Absolute = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Spd_Absolute.length;j++) {
        renderer_AMSpd_Absolute.addBreak(aBrk_Spd_Absolute[j]);
      }
      renderer_PMSpd_Absolute = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Spd_Absolute.length;j++) {
        renderer_PMSpd_Absolute.addBreak(aBrk_Spd_Absolute[j]);
      }
      var aBrk_Spd_Change = new Array(
        {minValue: -999, maxValue:      -30, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000), label: "Less than -30" },
        {minValue:  -30, maxValue:      -20, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 2.5000), label: "-30 to -20"    },
        {minValue:  -20, maxValue:      -10, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 1.2500), label: "-20 to -10"    },
        {minValue:  -10, maxValue:       -5, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 0.6250), label: "-10 to -5"     },
        {minValue:   -5, maxValue:        5, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.3125), label: "-5 to +5"       },
        {minValue:    5, maxValue:       10, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250), label: "+5 to +10"       },
        {minValue:   10, maxValue:       20, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 1.2500), label: "+10 to +20"      },
        {minValue:   20, maxValue:       30, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 2.5000), label: "+20 to +30"      },
        {minValue:   30, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 5.0000), label: "More than +30"  }
      );
      renderer_AMSpd_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Spd_Change.length;j++) {
        renderer_AMSpd_Change.addBreak(aBrk_Spd_Change[j]);
      }
      renderer_PMSpd_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Spd_Change.length;j++) {
        renderer_PMSpd_Change.addBreak(aBrk_Spd_Change[j]);
      }

      //PM V/C Renderers
      var aBrk_VC_Absolute = new Array(
        {minValue: 0.00, maxValue:     0.49, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[0]), 0.50), label: "Less than 0.50"},
        {minValue: 0.50, maxValue:     0.74, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[1]), 1.10), label: "0.50 to 0.74"  },
        {minValue: 0.75, maxValue:     0.84, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[2]), 1.70), label: "0.75 to 0.85"  },
        {minValue: 0.85, maxValue:     0.94, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[3]), 2.30), label: "0.85 to 0.95"  },
        {minValue: 0.95, maxValue:     0.99, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[4]), 3.90), label: "0.95 to 1.00"  },
        {minValue: 1.00, maxValue:     1.24, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[5]), 3.50), label: "1.00 to 1.25"  },
        {minValue: 1.25, maxValue:     1.49, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[6]), 4.10), label: "1.25 to 1.50"  },
        {minValue: 1.50, maxValue:     1.99, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[7]), 4.70), label: "1.50 to 2.00"  },
        {minValue: 2.00, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(vcColorData[8]), 5.30), label: "More than 2.00"}
      );
      renderer_AMVC_Absolute = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_VC_Absolute.length;j++) {
        renderer_AMVC_Absolute.addBreak(aBrk_VC_Absolute[j]);
      }
      renderer_PMVC_Absolute = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_VC_Absolute.length;j++) {
        renderer_PMVC_Absolute.addBreak(aBrk_VC_Absolute[j]);
      }
      var aBrk_VC_Change = new Array(
        {minValue: -999999, maxValue:    -0.51, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000), label: "Less than -0.50"},
        {minValue:   -0.50, maxValue:    -0.26, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 2.5000), label: "-0.50 to -0.25" },
        {minValue:   -0.25, maxValue:    -0.11, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 1.2500), label: "-0.25 to -0.10" },
        {minValue:   -0.10, maxValue:    -0.06, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 0.6250), label: "-0.10 to -0.05" },
        {minValue:   -0.05, maxValue:     0.05, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.3125), label: "-0.05 to +0.05"  },
        {minValue:    0.05, maxValue:     0.09, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250), label: "+0.05 to +0.10"   },
        {minValue:    0.10, maxValue:     0.24, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 1.2500), label: "+0.10 to +0.25"   },
        {minValue:    0.25, maxValue:     0.49, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 2.5000), label: "+0.25 to +0.50"   },
        {minValue:    0.50, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 5.0000), label: "More than +0.50" }
      );
      renderer_AMVC_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_VC_Change.length;j++) {
        renderer_AMVC_Change.addBreak(aBrk_VC_Change[j]);
      }
      renderer_PMVC_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_VC_Change.length;j++) {
        renderer_PMVC_Change.addBreak(aBrk_VC_Change[j]);
      }

      //Truck Volume Renderers
      var aBrk_VolTrk_Absolute = new Array(
        {minValue:     0, maxValue:      599, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[0]), 0.50), label: "Less than 600"   },
        {minValue:   600, maxValue:     1799, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[1]), 1.10), label: "600 to 1,800"    },
        {minValue:  1800, maxValue:     3599, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[2]), 1.70), label: "1,800 to 3,600"  },
        {minValue:  3600, maxValue:     7199, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[3]), 2.30), label: "3,600 to 7,200"  },
        {minValue:  7200, maxValue:    11999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[4]), 3.90), label: "7,200 to 12,000" },
        {minValue: 12000, maxValue:    15999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[5]), 3.50), label: "12,000 to 16,000"},
        {minValue: 16000, maxValue:    19999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[6]), 4.10), label: "16,000 to 20,000"},
        {minValue: 20000, maxValue:    23999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[7]), 4.70), label: "20,000 to 24,000"},
        {minValue: 24000, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[8]), 5.30), label: "More than 24,000"}
      );
      renderer_VolTrk_Absolute = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_VolTrk_Absolute.length;j++) {
        renderer_VolTrk_Absolute.addBreak(aBrk_VolTrk_Absolute[j]);
      }
      var aBrk_VolTrk_Change = new Array(
        {minValue: -999999, maxValue:    -2501, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000), label: "Less than -2,500"},
        {minValue:   -2500, maxValue:    -1001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 2.5000), label: "-2,500 to -1,000"},
        {minValue:   -1000, maxValue:     -501, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 1.2500), label: "-1,000 than -500"},
        {minValue:    -500, maxValue:     -101, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 0.6250), label: "-500 to -100"    },
        {minValue:    -100, maxValue:       99, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.3125), label: "-100 to +100"     },
        {minValue:     100, maxValue:      499, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250), label: "+100 to +500"      },
        {minValue:     500, maxValue:      999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 1.2500), label: "+500 to +1,000"    },
        {minValue:    1000, maxValue:     2499, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 2.5000), label: "+1,000 to +2,500"  },
        {minValue:    2500, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 5.0000), label: "More than +2,500" }
      );
      renderer_VolTrk_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_VolTrk_Change.length;j++) {
        renderer_VolTrk_Change.addBreak(aBrk_VolTrk_Change[j]);
      }
      

      dojo.xhrGet({
        url: "widgets/tttScenarioManager/data/segsummaries/_config_segsummary_fieldname_conversion.json",
        handleAs: "json",
        load: function(obj) {
            /* here, obj will already be a JS object deserialized from the JSON response */
            console.log('_config_segsummary_fieldname_conversion.json');
            dataFNConv = obj;
            tttR.updateParamEquationAndDisplay();
        },
        error: function(err) {
                /* this will execute if the response couldn't be converted to a JS object,
                        or if the request was unsuccessful altogether. */
        }
      });

      // create radio button option between absolute and percentage change
      var divRoadPCOptions = dom.byId("divRoadPCOptions");

      for (d in dRoadPCOptions) {

        if (dRoadPCOptions[d].value == curRoadPCOption) {
          b2Checked = true;
        } else {
          b2Checked = false;
        }
        
        var rbRoadPCOption = new RadioButton({ name:"RoadPCOption", label:dRoadPCOptions[d].label, id:"rb_" + dRoadPCOptions[d].value, value: dRoadPCOptions[d].value, checked: b2Checked});
        rbRoadPCOption.startup();
        rbRoadPCOption.placeAt(divRoadPCOptions);
        
        dojo.create('label', {
          innerHTML: dRoadPCOptions[d].label,
          for: rbRoadPCOption.id
        }, divRoadPCOptions);
        
        dojo.place("<br/>", divRoadPCOptions);

        //Radio Buttons Change Event
        dom.byId("rb_" + dRoadPCOptions[d].value).onchange = function(isChecked) {
          if(isChecked) {
            curRoadPCOption = this.value;
            console.log('Radio button select: ' + curRoadPCOption);
            tttR.updateRoadDisplay();
          }
        }
      }

      // create radio button option between which attributes to show
      var divRoadOptions = dom.byId("divRoadOptions");
      
      for (d in dRoadOptions) {

        if (dRoadOptions[d].value == curRoadOption) {
          bChecked = true;
        } else {
          bChecked = false;
        }
        
        var rbRoadOption = new RadioButton({ name:"RoadOption", label:dRoadOptions[d].label, id:"rb_" + dRoadOptions[d].value, value: dRoadOptions[d].value, checked: bChecked});
        rbRoadOption.startup();
        rbRoadOption.placeAt(divRoadOptions);
        
        dojo.create('label', {
          innerHTML: dRoadOptions[d].label,
          for: rbRoadOption.id
        }, divRoadOptions);
        
        dojo.place("<br/>", divRoadOptions);

        //Radio Buttons Change Event
        dom.byId("rb_" + dRoadOptions[d].value).onchange = function(isChecked) {
          if(isChecked) {
            curRoadOption = this.value;
            console.log('Radio button select: ' + curRoadOption);
            measureParams = [];
            tttR.updateParamEquationAndDisplay();
          }
        }
      }
    },

    updateParamEquationAndDisplay: function() {
      console.log('updateParamEquation');
      measureParams = dRoadOptions.find(o => o.value === curRoadOption)
            
      // get numerator and denominator
      _numerator   = measureParams['numerator']
      _denominator = measureParams['denominator']

      for (_ro in dataFNConv) {
        _numerator   = _numerator  .replace(_ro, dataFNConv[_ro])
        _denominator = _denominator.replace(_ro, dataFNConv[_ro])
      }

      // replace values in string expression with actual variable names
      // replace direction 'Dx_' with 'D1_' and 'D2_'
      _numeratorDirT   = _numerator  .replace('Dt_','')
      _denominatorDirT = _denominator.replace('Dt_','')
      _numeratorDir1   = _numerator  .replace('Dx','D1')
      _denominatorDir1 = _denominator.replace('Dx','D1')
      _numeratorDir2   = _numerator  .replace('Dx','D2')
      _denominatorDir2 = _denominator.replace('Dx','D2')
      
      tttR.updateRoadDisplay();
    },

    updateRoadDisplay: function() {
      console.log('updateRoadDisplay');

      if (measureParams==[]) {
        console.log('Parameters Not Read In')
        return;
      }

      // clear all graphics
      tttR.map.graphics.clear();
      tttR.map.graphics.refresh();

      if (curScenarioComp=='none') {
        if (curRoadOption=='Vol') {
          renderer_road = renderer_Vol_Absolute;
        } else if (curRoadOption=='AMSpd') {
          renderer_road = renderer_AMSpd_Absolute;
        } else if (curRoadOption=='AMVC') {
          renderer_road = renderer_AMVC_Absolute;
        } else if (curRoadOption=='Lanes') {
          renderer_road = renderer_Lanes_Absolute;
        }else if (curRoadOption=='PMSpd') {
          renderer_road = renderer_PMSpd_Absolute;
        } else if (curRoadOption=='PMVC') {
          renderer_road = renderer_PMVC_Absolute;
        } else if (curRoadOption=='VolTrk') {
          renderer_road = renderer_VolTrk_Absolute;
        }
      } else {
          if (curRoadPCOption=='Abs') {
            if (curRoadOption=='Vol') {
              renderer_road = renderer_Vol_Change;
            } else if (curRoadOption=='AMSpd') {
              renderer_road = renderer_AMSpd_Change;
            } else if (curRoadOption=='AMVC') {
              renderer_road = renderer_AMVC_Change;
            } else if (curRoadOption=='Lanes') {
              renderer_road = renderer_Lanes_Change;
            }else if (curRoadOption=='PMSpd') {
              renderer_road = renderer_PMSpd_Change;
            } else if (curRoadOption=='PMVC') {
              renderer_road = renderer_PMVC_Change;
            } else if (curRoadOption=='VolTrk') {
              renderer_road = renderer_VolTrk_Change;
            }
          } else {
            if (curRoadOption=='Vol') {
              renderer_road = tttR.getPercentChangeRenderer('Vol');
            } else if (curRoadOption=='AMSpd') {
              renderer_road = tttR.getPercentChangeRenderer('AMSpd');
            } else if (curRoadOption=='AMVC') {
              renderer_road = tttR.getPercentChangeRenderer('AMVC');
            } else if (curRoadOption=='Lanes') {
              renderer_road = tttR.getPercentChangeRenderer('Lanes');
            }else if (curRoadOption=='PMSpd') {
              renderer_road = tttR.getPercentChangeRenderer('PMSpd');
            } else if (curRoadOption=='PMVC') {
              renderer_road = tttR.getPercentChangeRenderer('PMVC');
            } else if (curRoadOption=='VolTrk') {
              renderer_road = tttR.getPercentChangeRenderer('VolTrk');
            }
          }
      }

      waitForQueries = 0; // initialize query number
      // run multiple times to avoid 2000 limit on returned features
      tttR._queryFeatures("SEGID <= '" + strMiddleSeg1 + "'");
      tttR._queryFeatures("SEGID  > '" + strMiddleSeg1 + "' AND SEGID <= '" + strMiddleSeg2 + "'");
      tttR._queryFeatures("SEGID  > '" + strMiddleSeg2 + "'");
    },

    _queryFeatures: function(_filterstring){ 

      var query, updateFeature;
      query = new Query();
      query.outFields = ["*"];
      query.returnGeometry = false;
      //query.where = "1=1";
      query.where = _filterstring

      
      lyrSegments.queryFeatures(query,function(featureSet) {
        //Update values
        var resultCount = featureSet.features.length;


        for (var i = 0; i < resultCount; i++) {
          updateFeature = featureSet.features[i];
          _segid = updateFeature.attributes['SEGID']

          _mainValue = 0;
          _compValue = 0;
          _dispValue = 0;

          _mainValue_numerator = 0;
          _compValue_numerator = 0;
          _dispValue_numerator = 0;

          _mainValue_denominator = 1;
          _compValue_denominator = 1;
          _dispValue_denominator = 1;

          var _segDataMain = dataRoadMain[_segid]
          var _segDataComp = dataRoadComp[_segid]

          try {
            _ft = _segDataMain[dataFNConv['FT']];
            // caculate non-aggregated and directional values
            switch(measureParams['agg']) {
              case 'none':
                _mainValue = eval(_numeratorDirT.replace('obj','_segDataMain')) / eval(_denominatorDirT.replace('obj','_segDataMain'));
                if (curScenarioComp!='none') {
                  _compValue = eval(_numeratorDirT.replace('obj','_segDataComp')) / eval(_denominatorDirT.replace('obj','_segDataComp'));
                }
                break;
              case 'sum':
              case 'min':
              case 'max':
                _mainValue_Dir1 = eval(_numeratorDir1.replace('obj','_segDataMain')) / eval(_denominatorDir1.replace('obj','_segDataMain'));
                _mainValue_Dir2 = eval(_numeratorDir2.replace('obj','_segDataMain')) / eval(_denominatorDir2.replace('obj','_segDataMain'));
                if (curScenarioComp!='none') {
                  _compValue_Dir1 = eval(_numeratorDir1.replace('obj','_segDataComp')) / eval(_denominatorDir1.replace('obj','_segDataComp'));
                  _compValue_Dir2 = eval(_numeratorDir2.replace('obj','_segDataComp')) / eval(_denominatorDir2.replace('obj','_segDataComp'));
                }
            }

            // calculate for aggregated results
            switch(measureParams['agg']) {
              case 'sum':
                  _mainValue += _mainValue_Dir1 + _mainValue_Dir2;
                  _compValue += _compValue_Dir1 + _compValue_Dir2;
                break;
              case 'min':
                _mainValue = Math.min(_mainValue_Dir1, _mainValue_Dir2);
                _mainValue = Math.min(_compValue_Dir1, _compValue_Dir2);
                break;
              case 'max':
                _mainValue = Math.max(_mainValue_Dir1, _mainValue_Dir2);
                _mainValue = Math.max(_compValue_Dir1, _compValue_Dir2);
                break;
              default:
                // code block
            }
          } catch(err) {
            // error
          }

          
          // calculate final display value based on selection (absolute or change)
          try {
            if (curRoadPCOption=='Abs') { // absolute change
            _dispValue = _mainValue - _compValue;
            } else { // percent change
              if (_compValue >0) _dispValue = ((_mainValue - _compValue) / _compValue) * 100;
            }
          } catch(err) {
            _dispValue = _mainValue;
          }

          // set final display value
          updateFeature.attributes['DisplayValue'] = _dispValue;
          updateFeature.attributes['FT'] = _ft;

          // add feature to graphics layer
          tttR.map.graphics.add(updateFeature);
        }

      });

      waitForQueries += 1;
      if (waitForQueries==3) {
        tttR.updateRenderer();
      }

    },

    updateRenderer: function() {
      lyrSegments.setRenderer(renderer_road);

      tttR.map.graphics.setRenderer(renderer_road);
      tttR.map.graphics.refresh();
    },

    getPercentChangeRenderer: function(featureName) {
      renderer_PC_Change = new UniqueValueRenderer({
        type: "unique-value",  // autocasts as new UniqueValueRenderer()
        valueExpression: "var p = $feature.DisplayValue;" +
                         "var ft = $feature.FT;" +
                         "if      (p< -200 && ft>= 20)              { return 'class_f1' ; }" +
                         "else if ((p< -40 && p>= -200) && ft>= 20) { return 'class_f2' ; }" +
                         "else if ((p< -20 && p>= -40)  && ft>= 20) { return 'class_f3' ; }" +
                         "else if ((p< -5  && p>= -20)  && ft>= 20) { return 'class_f4' ; }" +
                         "else if ((p< 5   && p>= -5)   && ft>= 20) { return 'class_f5' ; }" +
                         "else if ((p< 20  && p>= 5)    && ft>= 20) { return 'class_f6' ; }" +
                         "else if ((p< 40  && p>= 20)   && ft>= 20) { return 'class_f7' ; }" +
                         "else if ((p< 100 && p>= 40)   && ft>= 20) { return 'class_f8' ; }" +
                         "else if ((p< 200 && p>= 100)  && ft>= 20) { return 'class_f9' ; }" +
                         "else if ((p< 400 && p>= 200)  && ft>= 20) { return 'class_f10'; }" +
                         "else if (p> 400  && ft>= 20)              { return 'class_f11'; }" +
                         "else if (p< -200 && ft < 20)             { return 'class_r1' ; }" +
                         "else if ((p< -40 && p>= -200) && ft< 20) { return 'class_r2' ; }" +
                         "else if ((p< -20 && p>= -40)  && ft< 20) { return 'class_r3' ; }" +
                         "else if ((p< -5  && p>= -20)  && ft< 20) { return 'class_r4' ; }" +
                         "else if ((p< 5   && p>= -5)   && ft< 20) { return 'class_r5' ; }" +
                         "else if ((p< 20  && p>= 5)    && ft< 20) { return 'class_r6' ; }" +
                         "else if ((p< 40  && p>= 20)   && ft< 20) { return 'class_r7' ; }" +
                         "else if ((p< 100 && p>= 40)   && ft< 20) { return 'class_r8' ; }" +
                         "else if ((p< 200 && p>= 100)  && ft< 20) { return 'class_r9' ; }" +
                         "else if ((p< 400 && p>= 200)  && ft< 20) { return 'class_r10'; }" +
                         "else if (p> 400  && ft< 20)              { return 'class_r11'; }",
        uniqueValueInfos: [{value:"class_f1",  label:"Freeway Less than -200%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 10.0000)},
                           {value:"class_f2",  label:"Freeway -200% to -40%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 7.5000)},
                           {value:"class_f3",  label:"Freeway -40% to -20%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 6.2500)},
                           {value:"class_f4",  label:"Freeway -20% to -5%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 5.6250)},
                           {value:"class_f5",  label:"Freeway -5% to +5%"      , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 5.3125)},
                           {value:"class_f6",  label:"Freeway +5% to +20%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 5.6250)},
                           {value:"class_f7",  label:"Freeway +20% to +40%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 6.2500)},
                           {value:"class_f8",  label:"Freeway +40% to +100%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 7.5000)},
                           {value:"class_f9",  label:"Freeway +100% to +200%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 9.5000)},
                           {value:"class_f10", label:"Freeway +200% to +400%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"),      10.0000)},
                           {value:"class_f11", label:"Freeway More than +400%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"),      14.0000)},
                           {value:"class_r1",  label:"Arterial Less than -200%", symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000)},
                           {value:"class_r2",  label:"Arterial -200% to -40%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 2.5000)},
                           {value:"class_r3",  label:"Arterial -40% to -20%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 1.2500)},
                           {value:"class_r4",  label:"Arterial -20% to -5%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 0.6250)},
                           {value:"class_r5",  label:"Arterial -5% to +5%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.3125)},
                           {value:"class_r6",  label:"Arterial +5% to +20%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250)},
                           {value:"class_r7",  label:"Arterial +20% to +40%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 1.2500)},
                           {value:"class_r8",  label:"Arterial +40% to +100%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 2.5000)},
                           {value:"class_r9",  label:"Arterial +100% to +200%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 4.5000)},
                           {value:"class_r10", label:"Arterial +200% to +400%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"),      5.0000)},
                           {value:"class_r11", label:"Arterial More than +400%", symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"),      9.0000)}]
      });
      return renderer_PC_Change;
    },

    numberWithCommas: function(x) {
      return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    },
        
    setLegendBar: function() {
      console.log('setLegendBar');

      var _sLegend = 'Number of Daily Riders per Link'

      dom.byId("LegendName").innerHTML = _sLegend;

      if (typeof bertColorData !== 'undefined') {
        for (var i=0;i<bertColorData.length;i++)
          dom.byId("divColor" + (i + 1).toString()).style.backgroundColor = bertColorData[i];
      }
    },

    showLegend: function(){
      console.log('showLegend');
      var pm = PanelManager.getInstance();
      var bOpen = false;
      
      //Close Legend Widget if open
      for (var p=0; p < pm.panels.length; p++) {
        if (pm.panels[p].label == "Legend") {
          if (pm.panels[p].state != "closed") {
            bOpen=true;
            pm.closePanel(pm.panels[p]);
          }
        }
      }
    
      if (!bOpen) {
        //pm.showPanel(this.appConfig.widgetOnScreen.widgets[WIDGETPOOLID_LEGEND]);
      }
    },

    checkVolLabel: function() {
      console.log('checkVolLabel');
      if (dom.byId("chkLabels").checked == true) {
        lyrLinks[this.getCurDispLayerLoc()].setLabelingInfo([ labelClassOn  ] );
      } else {
        lyrLinks[this.getCurDispLayerLoc()].setLabelingInfo([ labelClassOff ]);
      }
      
    },
    
    getMethods: function (obj) 
    {
      var res = [];
      for(var m in obj) {
        if(typeof obj[m] == "function") {
          res.push(m)
        }
      }
      return res;
    },

    onOpen: function(){
      console.log('onOpen');
      tttR.updateRoadDisplay();
      lastOpenedWidget = 'road';
    },

    onClose: function(){
      //this.ClickClearButton();
      console.log('onClose');
    },

    onMinimize: function(){
      console.log('onMinimize');
    },

    onMaximize: function(){
      console.log('onMaximize');
    },

    onSignIn: function(credential){
      /* jshint unused:false*/
      console.log('onSignIn');
    },

    onSignOut: function(){
      console.log('onSignOut');
    },

    //added from Demo widget Setting.js
    setConfig: function(config){
      //this.textNode.value = config.districtfrom;
    var test = "";
    },

    getConfigFrom: function(){
      //WAB will get config object through this method
      return {
        //districtfrom: this.textNode.value
      };
    },

    //Receiving messages from other widgets
    onReceiveData: function(name, widgetId, data, historyData) {
      //filter out messages
      if(data.message=='road'){
        tttR.updateRoadDisplay();
      }
    },
  });
});